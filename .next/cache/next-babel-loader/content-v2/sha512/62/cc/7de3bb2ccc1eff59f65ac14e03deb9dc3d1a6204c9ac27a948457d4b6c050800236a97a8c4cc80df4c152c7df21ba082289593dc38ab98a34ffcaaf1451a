{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/fernandamarques/moveit-nextjs/src/contexts/CountDownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nvar countDownTimeout;\nexport var CountdowmContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isactive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountDown() {\n    setIsActive(true);\n  }\n\n  useEffect(function () {\n    if (isactive && time > 0) {\n      countDownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isactive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isactive, time]);\n\n  function resetCountDown() {\n    clearTimeout(countDownTimeout);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CountdowmContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isactive: isactive,\n      startCountDown: startCountDown,\n      resetCountDown: resetCountDown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"lynw4JjiqQQVSsfnJC57KVm7SuA=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["/Users/fernandamarques/moveit-nextjs/src/contexts/CountDownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","countDownTimeout","CountdowmContext","CountdownProvider","children","startNewChallenge","time","setTime","isactive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountDown","setTimeout","resetCountDown","clearTimeout"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAgBA,IAAIC,gBAAJ;AAEA,OAAO,IAAMC,gBAAgB,gBAAGN,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASO,iBAAT,OAA+D;AAAA;;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;;AAAA,oBACpCP,UAAU,CAACG,iBAAD,CAD0B;AAAA,MAC1DK,iBAD0D,eAC1DA,iBAD0D;;AAAA,kBAG1CN,QAAQ,CAAC,MAAM,EAAP,CAHkC;AAAA,MAG3DO,IAH2D;AAAA,MAGrDC,OAHqD;;AAAA,mBAIlCR,QAAQ,CAAC,KAAD,CAJ0B;AAAA,MAI3DS,QAJ2D;AAAA,MAIjDC,WAJiD;;AAAA,mBAK5BV,QAAQ,CAAC,KAAD,CALoB;AAAA,MAK3DW,WAL2D;AAAA,MAK9CC,cAL8C;;AAOlE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAEDX,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBL,MAAAA,gBAAgB,GAAGgB,UAAU,CAAC,YAAM;AAChCV,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAKK,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC7BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAXQ,EAWN,CAACG,QAAD,EAAWF,IAAX,CAXM,CAAT;;AAcA,WAASY,cAAT,GAA0B;AACtBC,IAAAA,YAAY,CAAClB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH;;AAED,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BC,MAAAA,OAAO,EAAPA,OAD8B;AAE9BG,MAAAA,OAAO,EAAPA,OAF8B;AAG9BL,MAAAA,WAAW,EAAXA,WAH8B;AAI9BF,MAAAA,QAAQ,EAARA,QAJ8B;AAK9BQ,MAAAA,cAAc,EAAdA,cAL8B;AAM9BE,MAAAA,cAAc,EAAdA;AAN8B,KAAlC;AAAA,cAQKd;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA/CeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\n\ninterface CountDownContextData {\n    minutes: number\n    seconds: number\n    hasFinished: boolean\n    isactive: boolean\n    startCountDown: () => void\n    resetCountDown: () => void\n}\n\n\ninterface CountdowmProviderProps {\n    children: ReactNode\n}\n\nlet countDownTimeout: NodeJS.Timeout\n\nexport const CountdowmContext = createContext({} as CountDownContextData)\n\nexport function CountdownProvider({children}: CountdowmProviderProps) {\n    const { startNewChallenge } = useContext(ChallengesContext)\n\n    const [time, setTime] = useState(0.1 * 60)\n    const [isactive, setIsActive] = useState(false)\n    const [hasFinished, setHasFinished] = useState(false)\n\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n\n    function startCountDown() {\n        setIsActive(true)\n    }\n\n    useEffect(() => {\n        if (isactive && time > 0) {\n            countDownTimeout = setTimeout(() => {\n                setTime(time - 1);\n            }, 1000)\n        }\n        else if (isactive && time === 0) {\n            setHasFinished(true)\n            setIsActive(false)\n            startNewChallenge()\n        }\n    }, [isactive, time])\n\n\n    function resetCountDown() {\n        clearTimeout(countDownTimeout)\n        setIsActive(false)\n        setTime(0.1 * 60)\n        setHasFinished(false)\n    }\n\n    return(\n        <CountdowmContext.Provider value={{\n            minutes,\n            seconds,\n            hasFinished,\n            isactive,\n            startCountDown,\n            resetCountDown\n        }}>\n            {children}\n        </CountdowmContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}